apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: deploy-and-test
spec:
  description: |
    This step runs the script that deploys RHDH and runs the tests
  params:
    - name: rhdh_secrets
      default: rhdh-secrets
  volumes:
    - name: $(params.rhdh_secrets)
      secret: 
        secretName: $(params.rhdh_secrets)
  steps:
    - name: deploy-and-test
      image: quay.io/redhat-user-workloads/rh-ee-oaljalju-tenant/test2:5bca399965bf7bebe60d7739ccaecbf46ad60e60 # Container image with OC installed
      volumeMounts:
        - mountPath: "/etc/secrets"
          name: $(params.rhdh_secrets)
          readOnly: true
      env:
        - name: RHDH_SECRETS
          value: $(params.rhdh_secrets)
      script: |
        #!/usr/bin/env bash
        export HOME WORKSPACE
        HOME=/tmp
        WORKSPACE=$(pwd)
        cd /tmp || exit


        check_backstage_running() {
          local release_name=$1
          local namespace=$2
          local url=$3

          local max_attempts=30
          local wait_seconds=30

          echo "Checking if Backstage is up and running at ${url}"

          for ((i = 1; i <= max_attempts; i++)); do
            local http_status
            http_status=$(curl --insecure -I -s "${url}" | grep HTTP | awk '{print $2}')

            if [ "${http_status}" -eq 200 ]; then
              echo "Backstage is up and running!"
              export BASE_URL="${url}"
              echo "######## BASE URL ########"
              echo "${BASE_URL}"
              return 0
            else
              echo "Attempt ${i} of ${max_attempts}: Backstage not yet available (HTTP Status: ${http_status})"
              sleep "${wait_seconds}"
            fi
          done

          echo "Failed to reach Backstage at ${BASE_URL} after ${max_attempts} attempts." | tee -a "/tmp/${LOGFILE}"
          return 1
        }

        API_SERVER_URL=$(cat /etc/secrets/API_SERVER_URL)
        USERNAME=$(cat /etc/secrets/USERNAME)
        PASSWORD=$(cat /etc/secrets/PASSWORD)
        oc login ${API_SERVER_URL} --username=${USERNAME} --password=${PASSWORD}

        oc create ns showcase
        export BASE_URL="redhat-developer-hub-showcase.$(oc get ingresses.config/cluster -o jsonpath='{.spec.domain}')"
        
        curl -sSLO https://raw.githubusercontent.com/rhdh-bot/openshift-helm-charts/redhat-developer-hub-1.3-124-CI/installation/install.sh && chmod +x install.sh
        ./install.sh 1.3-124-CI --namespace showcase --chartrepo

        check_backstage_running redhat-developer-hub showcase ${BASE_URL}
        git clone https://github.com/Omar-AlJaljuli/janus-idp-backstage-showcase-.git
        cd janus-idp-backstage-showcase- || exit
        git checkout "Konflux-CI" || exit
        cd e2e-tests/
        yarn install
        yarn playwright install
        
        cd playwright/e2e/
        yarn playwright test ./instance-health-check.spec.ts
        

